CREATE TABLESPACE RECURSOS_HUMANOS
DATAFILE 'C:/DATA/RH_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

ALTER TABLESPACE RECURSOS_HUMANOS
ADD DATAFILE 'C:/DATA/RH_02.DBF'
SIZE 200M AUTOEXTEND
ON NEXT 200M
MAXSIZE 4096M;

SELECT TABLESPACE_NAME, FILE_NAME FROM DBA_DATA_FILES;

-- SEQUENCES

CREATE SEQUENCE SEQ_GERAL
START WITH 100
INCREMENT BY 10;

-- CRIANDO UMA TABELA NA TABLESPACE

CREATE TABLE FUNCIONARIOS(
	IDFUNCIONARIO INT PRIMARY KEY,
	NOME VARCHAR2(30)
)TABLESPACE RECURSOS_HUMANOS;

INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL, 'JOAO');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL, 'CLARA');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL, 'LILIAN');

SELECT * FROM FUNCIONARIOS;

-- CRIANDO UMA TS DE MARKETING
CREATE TABLESPACE MARKETING
DATAFILE 'C:/DATA/MKT_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

CREATE TABLE CAMPANHAS(
	IDCAMPANHA INT PRIMARY KEY,
	NOME VARCHAR2(30)
)TABLESPACE MARKETING;

INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL, 'PRIMAVERA');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL, 'VERAO');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL, 'INVERNO');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL, 'OUTONO');

SELECT * FROM CAMPANHAS;

-- COLOCANDO A TS OFFLINE

ALTER TABLESPACE RECURSOS_HUMANOS OFFLINE;

-- APONTAR O DICIONARIO DE DADOS

ALTER TABLESPACE RECURSOS_HUMANOS
RENAME DATAFILE 'C:/DATA/RH_01.DBF' TO 'C:/PRODUCAO/RH_01.DBF';

ALTER TABLESPACE RECURSOS_HUMANOS
RENAME DATAFILE 'C:/DATA/RH_02.DBF' TO 'C:/PRODUCAO/RH_02.DBF';

-- TORNANDO A TS ONLINE

ALTER TABLESPACE RECURSOS_HUMANOS ONLINE;

SELECT * FROM FUNCIONARIOS;
SELECT * FROM CAMPANHAS;

CREATE TABLE ALUNO(
    IDALUNO INT PRIMARY KEY,
    NOME VARCHAR2(30),
    EMAIL VARCHAR2(30),
    SALARIO NUMBER(10,2)
);

CREATE SEQUENCE SEQ_EXEMPLO;

INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'JOAO','JOAO@GMAIL.COM',1000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'CLARA','CLARA@GMAIL.COM',2000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'CELIA','CELIA@GMAIL.COM',3000.00);

SELECT * FROM ALUNO;

CREATE TABLE ALUNO2(
    IDALUNO INT PRIMARY KEY,
    NOME VARCHAR2(30),
    EMAIL VARCHAR2(30),
    SALARIO NUMBER(10,2)
);

INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL,'JOAO','JOAO@GMAIL.COM',1000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL,'CLARA','CLARA@GMAIL.COM',2000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL,'CELIA','CELIA@GMAIL.COM',3000.00);

SELECT * FROM ALUNO2;

SELECT ROWID, IDALUNO, NOME, EMAIL, SALARIO FROM ALUNO;
SELECT ROWID, ROWNUM,IDALUNO, NOME, EMAIL, SALARIO FROM ALUNO;

SELECT IDALUNO, NOME, EMAIL, SALARIO FROM ALUNO WHERE ROWNUM <= 2;

/* PROCEDURE */

CREATE OR REPLACE PROCEDURE BONUS(P_IDALUNO ALUNO.IDALUNO%TYPE, P_PERCENT NUMBER)
    AS
        BEGIN
                UPDATE ALUNO SET SALARIO = SALARIO + (SALARIO * (P_PERCENT/100))
                WHERE IDALUNO = P_IDALUNO;
        
        END;
        /
        
        SELECT * FROM ALUNO;
        CALL BONUS(3,10);
        
CREATE OR REPLACE TRIGGER CHECK_SALARIO
BEFORE INSERT OR UPDATE ON ALUNO
FOR EACH ROW
BEGIN

END;
/

SHOW ERRORS;

CREATE OR REPLACE TRIGGER CHECK_SALARIO
BEFORE INSERT OR UPDATE ON ALUNO
FOR EACH ROW
BEGIN
        IF :NEW.SALARIO <2000 THEN
        RAISE_APPLICATION_ERROR(-20000, 'VALOR INVALIDO');
        END IF;
        
END;
/


INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'MAFRA','MAFRA@GMAIL.COM',2000.00);

SELECT * FROM ALUNO;

SELECT TRIGGER_NAME, TRIGGER_BODY
FROM USER_TRIGGERS;

-- TRIGGER DE EVENTOS

CREATE TABLE AUDITORIA(
    DATA_LOGIN DATE,
    LOGIN VARCHAR2(30)
);

CREATE OR REPLACE PROCEDURE LOGPROC IS
BEGIN
        INSERT INTO AUDITORIA (DATA_LOGIN, LOGIN)
        VALUES (SYSDATE, USER);

END LOGPROC;
/

CREATE OR REPLACE TRIGGER LOGTRIGGER
AFTER LOGON ON DATABASE
CALL LOGPROC
/

DROP TRIGGER LOGTRIGGER;

CREATE TABLE USUARIO(
    ID INT,
    NOME VARCHAR2(30)
);

CREATE TABLE BKP_USUARIO(
    ID INT,
    NOME VARCHAR2(30)
);

INSERT INTO USUARIO VALUES(1,'JOAO');
INSERT INTO USUARIO VALUES(2,'CLARA');

SELECT * FROM USUARIO;

CREATE OR REPLACE TRIGGER LOG_USUARIO
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN
    INSERT INTO BKP_USUARIO VALUES
    (:OLD.ID, :OLD.NOME);
END;
/

DELETE FROM USUARIO WHERE ID=1;

SELECT * FROM BKP_USUARIO;


